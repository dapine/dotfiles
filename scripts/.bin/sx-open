#!/usr/bin/env bash
# This is an attempt to replace xdg-open with something sane.

usage() {
	cat <<- EOF
		sx-open [-dhv] <uri/file>
		Flags:
		  -d   Dry run
		  -v   Verbose mode
		  -n   Disable desktop notifications
		  -h   Help
	EOF
}

act() {
	cfg verbose && printf 'CMD: %s\n' "$*" >&2
	cfg dryrun || { "$@"; return $?; }

	return 0
}

# cfg foo bool = [true|1]
# cfg foo [string] = 'bar'
# cfg foo
cfg() {
	declare s_name=$1; shift
	declare -n \
		_s="cfg[$s_name]" \
		_s_type="cfg[${s_name}_type]"

	if (( $# )); then
		while (( $# )); do
			case $1 in
				(bool|str) _s_type="$1";;

				(true|false|0|1)
					_s_type='bool'
					_s="$1"

					break
				;;

				(=)
					[[ $_s_type ]] || _s_type='string'

					[[ $_s_type == 'bool' ]] && {
						case $2 in
							(true|false|0|1) true;;
							(*)
								error "On line $LINENO, in $FUNCNAME: Invalid value for '$s_name' type 'bool': '$2'"
								exit 111
							;;
						esac
					}

					_s="$2"

					break
				;;

				(*)
					error "On line $LINENO, in $FUNCNAME: Syntax error: “cfg $s_name $*”"
					exit 115
				;;
			esac
			shift
		done
	else
		[[ -n $_s ]] || {
			error "On line $LINENO, in $FUNCNAME: invalid option: '$s_name'"
			exit 113
		}

		case $_s_type in
			(bool)
				case $_s in
					(true|1) return 0;;
					(false|0) return 1;;
				esac
			;;

			(*)
				printf '%s\n' "$_s"
				return 0
			;;
		esac
	fi
}

notify() {
	cfg notify || return 7 # disabled

	[[ $DISPLAY ]] || return 3
	[[ $notifier ]] || return 5

	"${notifier[@]}" 'sx-open' "$@"
}

error() {
	printf '%s\n' "$*" >&2
	notify "$*"
}

# handle_target <res> <uri>
# 1: cmd failed
# 3: no handler
handle_target() {
	declare -n result=$1
	declare h cmd regex target_is_file target target_left cmd_is_template
		cmd_append_target=1
		match=0
		target=$2
		target_left=$target

	if [[ -e "$target" ]]; then
		target_is_file=1

		[[ "$target" =~ ^/.* ]] || { target="${PWD}/${target}"; } # Turn relative paths to absolute ones.

		IFS=';' read target_mimetype _ <<< $( file -ib "$target" )
		target_left=$target_mimetype

		[[ $target_mimetype == 'inode/symlink' ]] && \
			IFS=';' read target_mimetype_true _ <<< $( file -ibL "$target" )

		set -- "${mime_handlers[@]}"
	elif is_uri "$target"; then
		set -- "${uri_handlers[@]}"
	else
		return 2
	fi

	while (( $# )); do
		cmd_str=$1 regex=$2
		cmd=()

		# Fix the regex
		[[ $regex =~ \^?([^\$]+)\$? ]] && regex="^${BASH_REMATCH[1]}$"

		if [[ $cmd_str == *'%target%'* ]]; then
			cmd=( ${cmd_str//%target%/$target} )
		else
			cmd=( $cmd_str "$target" )
		fi

		if [[ $target_left =~ $regex ]]; then
			match=1
		elif [[ $target_mimetype_true ]]; then
			[[ $target_mimetype_true =~ $regex ]] && match=1
		fi

		if (( match )); then
			act "${cmd[@]}"; result=$?
			(( result )) && return 1

			return 0
		fi

		shift 2
	done

	return 3
}

# DSL
uri() {
	declare r handler=$1; shift

	for r in "$@"; do
		uri_handlers+=( "$handler" "$r" )
	done
}

mime() {
	declare r handler=$1; shift

	for r in "$@"; do
		mime_handlers+=( "$handler" "$r" )
	done
}

scheme() {
	declare r handler=$1; shift

	for s in "$@"; do
		uri_handlers+=( "$handler" "$s:.+" )
	done
}

is_uri() [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9\+\.\-]+:.+ ]]

main() {
	declare cmd_result target

	declare -gA cfg
	cfg verbose bool = false
	cfg dryrun bool = false
	cfg notify bool = true

	# Source the config file.
	cfg_file="$HOME/.config/sx-open.cfg"
	[[ -f "$cfg_file" ]] && { source "$cfg_file"; }

	while (( $# )); do
		case $1 in
			(-d)
				cfg dryrun = true
				cfg verbose = true
			;;

			(-v) cfg verbose = true;;
			(-n) cfg notify = false;; # disable desktop notifications

			(-h) usage; return 0;;

			(--) shift; break;;
			(*) break;;
		esac

		shift
	done

	target=$1; [[ "$target" ]] || { usage; exit; }

	cfg dryrun && {
		printf 'Dry run: not actually running the handler\n' >&2
		cfg verbose true
	}

	# Treat file:// as local paths.
	[[ "$target" =~ ^file:(//)?(/.+) ]] && target=${BASH_REMATCH[2]}

	# Figure out if we're in X and set $notifier if we are.
	if [[ $DISPLAY ]]; then
		# Do we have notify-send?
		notifier=$(type -P 'notify-send')
	fi

	handle_target cmd_result "$target"

	case $? in
		(1)
			error "Action on “$target” failed with exit code: “$cmd_result”"
			return 4
		;;

		(2)
			error "No such file or directory: “$target”"
			return 2
		;;

		(3)
			error "No handlers found for “$target”"
			return 3
		;;
	esac

	return 0
}

main "$@"
